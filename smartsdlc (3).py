# -*- coding: utf-8 -*-
"""smartSDLC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kenv4OAw79UUWsLtW6niyWvTMWMwPXEH
"""

# Step 1: Install dependencies
!pip install transformers torch gradio PyPDF2 -q

import gradio as gr
from transformers import pipeline
import PyPDF2

# Step 2: Load a model
# (PDF la granite model mention pannirukku â€“ but IBM Granite direct-aa public illa
# so we use flan-t5-base for demo. If you have IBM Watsonx API key, replace here.)
generator = pipeline("text2text-generation", model="google/flan-t5-base")

# Step 3: PDF Reader
def read_pdf(file):
    reader = PyPDF2.PdfReader(file.name)
    text = ""
    for page in reader.pages:
        text += page.extract_text() + "\n"
    return text

# Step 4: AI Helper Function
def ai_helper(user_input, pdf_file=None):
    context = ""
    if pdf_file:
        context = read_pdf(pdf_file)
    prompt = f"""
    Context:
    {context}

    User Requirement:
    {user_input}

    Generate clear requirements, suggest code/test/bug-fix:
    """
    result = generator(prompt, max_length=300)[0]['generated_text']
    return result

# Step 5: Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("## ðŸ¤– SmartSDLC â€“ AI-Enhanced Software Development Lifecycle")
    with gr.Row():
        user_input = gr.Textbox(label="Enter Requirement / Bug / Query")
        pdf_file = gr.File(label="Upload PDF (Optional)")
    output = gr.Textbox(label="AI Response")
    submit_btn = gr.Button("Generate")
    submit_btn.click(ai_helper, inputs=[user_input, pdf_file], outputs=output)

demo.launch()